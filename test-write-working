#!/usr/bin/env /home/repos/public/Python/bin/python3.6

#Documentation stating API Call volume is rate limited to 5 calls per second per organization.
#https://documentation.meraki.com/zGeneral_Administration/Other_Topics/The_Cisco_Meraki_Dashboard_API#Every_request_must_specify_an_API_key_via_a_request_header

import time
from datetime import datetime
import sys
import os
import getpass
import xlrd
import pathlib
import logging
import threading
from queue import Queue
try:
    from meraki import meraki
except:
    os.system('pip install --user requests')
    os.system('pip install --user meraki')
try:
    print('---loading...')
    from meraki import meraki
except:
    logging.info('installation failed. please contact admin')  
    sys.exit('installation failed. please contact admin')
    
print_lock = threading.Lock()
logFileName = pathlib.Path.cwd() / 'IVAN-MIME-Logs.log'
logging.basicConfig(
    filename=logFileName,
    filemode='a',
    level=logging.DEBUG,
    format='%(asctime)s.%(msecs)03d %(levelname)s: %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S',
)

def updatePolicy(serialNumber, threadName):
    portnumberList = []
    myFilePath = pathlib.Path.cwd() / 'MIME-Push-Status'    
    if serialNumber == 'Ivan':
        result = {'1': 'one', '2': 'two'}
        logging.info(result)
    else:
        result = 'a'
    with print_lock:
        if type(result) is dict:
            status = 'Configured Success\n'
            myFile = open(myFilePath, 'a')
            myFile.write(status)
            myFile.close
            print('Ivan')
        else:
            status = 'Configured Failed\n'
            myFile = open(myFilePath, 'a')
            myFile.write(status)
            myFile.close
            print('Aila')

def worker():
    threadName = threading.current_thread().getName()
    while (q.qsize() != 0):
        try:
            serialNumber = q.get()
            logging.info('{} updating policy for serial: {}'.format(threadName, serialNumber))
            updatePolicy(serialNumber, threadName)
            q.task_done()
        except:
            return


########################## MAIN ##########################
userID = os.getlogin()
logging.info('---Start MIME Script execution by: ' + userID)
os.system('clear')
try:
    G_switchSerialList = ['Ivan', 'Ivan', 'Ivan', 'Ivan', 'Aila', 'Aila']
    print(G_switchSerialList)
except:
    sys.exit('Phase I Error. Exiting code...')
try:
    answer1 = input('---Do you want to proceed (Y/N, Default=N): ').lower()
    if answer1 in ['yes', 'y']:
        pass
    else:
        logging.info('---Choose not to proceed. Exiting code')
        sys.exit('---Choose not to proceed. Exiting code')
except:
    logging.info('---Phase II Error. Exiting code')
    sys.exit('---Phase II Error. Exiting code')

q = Queue()
for item in G_switchSerialList:
    q.put(item)
maxAllowedThread = min(3, q.qsize())
threadList = []
#print summary before start execution
print('Total number of Device queued: {}'.format(q.qsize()))
logging.info('Total number of Device queued: {}'.format(q.qsize()))
print('Starting {0} threads at a time.'.format(maxAllowedThread))
print('Summary:')
print('')
print('Idx Thread Name  Serial Number   Port#  Type    Vlan   PolicyNum')
print('--- ------------ --------------- ------ ------- ------ ----------')
start = time.time()
for i in range(maxAllowedThread):
    t = threading.Thread(target = worker)
    t.daemon = True
    t.start()
    threadList.append(t)
    logging.info('---Starting thread {}'.format(i))
[t.join() for t in threadList]
q.join()

#myFilePath = pathlib.Path.cwd() / 'MIME-Push-Status'
#with open(myFilePath, 'r') as f:
#    summary = [line.strip() for line in f]     

print('-' * 52)
#for line in summary:
#    print(line)
print('')
print('Total script runtime: {}'.format(time.time()-start))
print('---End of code')
exit()
