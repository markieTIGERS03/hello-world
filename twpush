#!/usr/bin/expect

set timeout 15
set Username [lindex $argv 0]
set Password [lindex $argv 1]
set Enable [lindex $argv 2]
set Directory /home/repos/public/TWTOOL/logs
set localdirectory /home/$Username/twtools/pushlogs
set tdate [clock format [clock seconds] -format %Y-%h-%d_%H:%M:%S_ -timezone :Asia/Manila]

set FNAME twpush_RESULT.txt
set LOGNAME "$Directory/$tdate$FNAME"

set CTRS 0
set CTRF 0

log_user 0

set f [open /home/$Username/twtools/iplist]
set ipadd [split [read -nonewline $f] "\n"]
close $f

# Iterate over the hosts
foreach host $ipadd {

regexp {([^ ]+):([^ ]+)} $host match IP HWMODEL

     switch -regexp $HWMODEL  {
          cisco {
		       log_user 0
               set g [open /home/$Username/twtools/commandscisco]
               set cmdcisco [split [read -nonewline $g] "\n"]
               close $g
               set LOGIN_STATUS [catch {
               spawn ssh -o ConnectTimeout=10 -oStrictHostKeyChecking=no -l test $IP
               expect {
                  timeout {return}
                  eof {return}
                  -re "\[^ ]+assword:" {continue}}}]

                if {$LOGIN_STATUS == 4 } {
				    log_user 1
                    log_file $localdirectory/$IP
                    spawn ssh -oStrictHostKeyChecking=no $Username@$IP
                    expect {
                        -re "\[^ ]+assword:" { send "$Password\r"}
                    }
                    expect {
                        -re "\[^ ]+>" { send "enable\r"}
                    }
                    expect {
                        -re "\[^ ]+assword:" { send "$Enable\r"}
                    }

                    foreach cmd $cmdcisco {
                         expect {
                              -re "\[^ ]+#" {send "$cmd\r"}
                             }
                         }
										
                    expect {
                        -re "\[^ ]+#" { send "exit\r"}
                    }
                    log_file
                    expect eof
                    incr CTRS
					log_user 0
                } else {
                    log_file $localdirectory/$IP-FAIL
                    send_log "$IP\t\tSSH FAIL\n"
                    log_file
                    incr CTRF
                    }
                            }
                                                  
          riverbed {
		       log_user 0
               set h [open /home/$Username/twtools/commandsriverbed]
               set cmdriverbed [split [read -nonewline $h] "\n"]
               close $h
               set LOGIN_STATUS [catch {
               spawn ssh -o ConnectTimeout=10 -oStrictHostKeyChecking=no -l test $IP
               expect {
                  timeout {return}
                  eof {return}
                  -re "\[^ ]+assword:" {continue}}}]

                if {$LOGIN_STATUS == 4 } {
				    log_user 1
                    log_file $localdirectory/$IP
                    spawn ssh -oStrictHostKeyChecking=no $Username@$IP
                    expect {
                        -re "\[^ ]+assword:" { send "$Password\r"}
                    }
                    expect {
                        -re ">" { send "enable\r"}
                    }

                    foreach cmd $cmdriverbed {
                         expect {
                              -re "#" {send "$cmd\r"}
                             }
                         }

                    expect {
                        -re "#" { send "exit\r"}
                    }
                    log_file
                    expect eof
                    incr CTRS
					log_user 0
                } else {
                    log_file $localdirectory/$IP-FAIL
                    send_log "$IP\t\tSSH FAIL\n"
                    log_file
                    incr CTRF
                    }
                            }

          procurve {
		       log_user 0
               set j [open /home/$Username/twtools/commandsprocurve]
               set cmdprocurve [split [read -nonewline $j] "\n"]
               close $j
               set LOGIN_STATUS [catch {
               spawn ssh -o ConnectTimeout=10 -oStrictHostKeyChecking=no -l test $IP
               expect {
                  timeout {return}
                  eof {return}
                  -re "\[^ ]+assword:" {continue}}}]

                if {$LOGIN_STATUS == 4 } {
				    log_user 1
                    log_file $localdirectory/$IP
                    spawn ssh -oStrictHostKeyChecking=no $Username@$IP
                    expect {
                        -re "\[^ ]+assword:" { send "$Password\r"}
                    }
                    expect {
                        -re "\[^ ]+>" { send "enable\r"}
                        -re "Press any key" {
                           send "\r"
                           expect -re "\[^ ]+>" { send "enable\r"}
                        }
                    }
                    expect {
                        -re "TACACS " {
                           send "$Username\r"
                           expect "assword:" {send "$Password\r"}
                        }
                        -re "\[^ ]+sername:" {
                           send "manager\r"
                           expect "assword:" {send "$Enable\r"}
                        }
                        -re "\[^ ]+assword:" { send "$Enable\r"}
                    }

                    foreach cmd $cmdprocurve {
                         expect {
                              -re "\[^ ]+#" {send "$cmd\r"}
                             }
                         }
					
                    expect {
                        -re "\[^ ]+#" { send "logout\r"}
                    }
                    expect {
                        -re "y/n" { send "y\r"}
                    }
                    log_file
                    expect eof
                    incr CTRS
					log_user 0
                } else {
                    log_file $localdirectory/$IP-FAIL
                    send_log "$IP\t\tSSH FAIL\n"
                    log_file
                    incr CTRF
                    }
                            }

          comware {
		       log_user 0
               set LOGIN_STATUS [catch {
               spawn ssh -o ConnectTimeout=10 -oStrictHostKeyChecking=no -l test $IP
               expect {
                  timeout {return}
                  eof {return}
                  -re "\[^ ]+assword:" {continue}}}]

                if {$LOGIN_STATUS == 4 } {
				    log_user 1
                    log_file $localdirectory/$IP
                    spawn ssh -oStrictHostKeyChecking=no $Username@$IP
                    expect {
                        -re "\[^ ]+assword:" { send "$Password\r"}
                    }
                    expect {
                        -re "<\[^ ]+\-\[^ ]+>" { send "super\r"}
                    }
                    expect {
                        -re "\[^ ]+assword:" { send "$Enable\r"}
                    }
                    expect {
                        -re "<\[^ ]+\-\[^ ]+>" { send "screen-length disable\r"}
                    }
                    expect {
                        -re "<\[^ ]+\-\[^ ]+>" { send "display ip routing-table protocol direct\r"}
                    }
                    expect {
                        -re "<\[^ ]+\-\[^ ]+>" { send "quit\r"}
                    }
                    log_file
                    expect eof
                    incr CTRS
					log_user 0
                } else {
                    log_file $localdirectory/$IP-FAIL
                    send_log "$IP\t\tSSH FAIL\n"
                    log_file
                    incr CTRF
                    }
                            }
          default {
               log_file $localdirectory/$IP-FAIL
               send_log "$IP\t\tUNKNOWN DEVICE\n"
               log_file
               puts "$IP is an UNKNOWN DEVICE"
          }
     }
}

set total "[expr $CTRS+$CTRF]"

puts "\n"
puts "\n"
puts "\n"

puts "================="
puts "Script completed"
puts ""
puts "TOTAL Device in the list: $total"
puts "Config PUSH SUCCESS: $CTRS"
puts "Config PUSH FAILED: $CTRF"
puts ""
puts "Push logs are store in: $localdirectory"
puts "================="

exit
